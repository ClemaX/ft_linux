#!/bin/bash

dialog_menu() # title [(option_id option_name)...]
{
	local title="$1"; shift
	local options=("$@")

	dialog --clear --stdout \
		--menu "$title" 0 0 0 \
			"${options[@]}" \
	|| echo back
}

dialog_procedure() # procedure title [gauge_title]
{
	local procedure="$1"
	local title="$2"
	local gauge_title="${3:-$title}"

	local log_file
	local width height
	local widget_width
	local tailbox_height gauge_height
	local gauge_pos tailbox_pos
	local padding=2

	log_file=$(mktemp --tmpdir lfs-config.expand_fs.XXXX)
	
	width=$(tput cols)
	height=$(tput lines)

	widget_width=$((width - 3 * padding))
	gauge_height=8
	tailbox_height=$((height - gauge_height - 3 * padding))

	gauge_pos=("$padding" "$padding")
	tailbox_pos=("$((gauge_pos[0] + gauge_height + padding))" "$padding")

	"$procedure" "$log_file" \
	| dialog --title "$title" \
		--begin "${tailbox_pos[@]}" \
		--tailboxbg "$log_file" "$tailbox_height" "$widget_width" \
		--and-widget \
		--begin "${gauge_pos[@]}" \
		--gauge "$gauge_title" "$gauge_height" "$widget_width" 0

	rm "$log_file"
}

procedure_progress() # percentage message
{
	local percentage="${1}"; shift

	printf 'XXX\n%d\n%s\nXXX\n' "${percentage%%%*}" "$*"
}

# Network interface selector
net_interface_dialog()
{
	local options=()
	local interfaces
	
	interfaces=$(ip -o link show | awk -F': ' '{print $2}')

	for interface in $interfaces
	do
		options+=("$interface" "$interface")
	done

	dialog_menu "Select an interface to configure:" "${options[@]}"
}

# Existing network configuration
net_config_exists_dialog()
{
	local options=(
		edit	"Edit configuration..."
		delete	"Delete configuration"
	)

	dialog_menu "What do you want to do?" "${options[@]}"
}

# New network service selector
net_config_new_dialog()
{
	local options=()
	local services=(dhcpcd ipv4-static)

	for service in "${services[@]}"
	do
		options+=("$service" "Setup using $service...")
	done

	dialog_menu "Which network service do you want to use?" "${options[@]}"
}

ipv4_static_dialog() # dst_file
{
    # Set the form width and height.
    local width=15
    local height=50

    # Set the form labels and default values.
    local labels=(
		"IP address"	"Gateway"		"Prefix Length"	"Broadcast"
	)
    local values=(
		"192.168.1.2"	"192.168.1.1"	"24"			"192.168.1.255"
	)

	local options=()
	local i=0

	while [ "$i" -lt "${#labels[@]}" ]
	do
		local label="${labels[i]}"
		local value="${values[i]}"

		local label_pos=("$((i + 1))" 1)
		local value_pos=("$((i + 1))" "$width")
		local field_len=25
		local input_len=0

		options+=(
			"$label:" "${label_pos[@]}"
			"$value" "${value_pos[@]}"
			"$field_len" "$input_len")

		((i+=1))
	done

    dialog --clear --stdout \
		--title "Static IPv4 Configuration" \
		--form "Fill in the fields:" "$width" "$height" 0 \
			"${options[@]}"
}

# Network configuration
net_config()
{
	local interface
	local ifconfig_file

	interface=$(net_interface_dialog)
	
	[ "$interface" == back ] && return

	ifconfig_file="/etc/sysconfig/ifconfig.$interface"

	if [ -e "$ifconfig_file" ]
	then
		selection=$(net_config_exists_dialog)

		case "$selection"
		in
			edit)
				echo TODO
				;;
			delete)
				rm "$ifconfig_file"
				;;
			*)
				return
				;;
		esac
	else
		selection=$(net_config_new_dialog)

		case "$selection"
		in
			ipv4-static)
				readarray -t config < <(ipv4_static_dialog)

				[ $? -eq 1 ] && return

				# Store configuration
				cat > "$ifconfig_file" << EOF
ONBOOT=yes
IFACE="$interface"
SERVICE=ipv4-static
IP="${config[0]}"
GATEWAY="${config[1]}"
PREFIX="${config[2]}"
BROADCAST="${config[3]}"
EOF
				;;
			dhcpcd)
				cat > "$ifconfig_file" << EOF
ONBOOT="yes"
IFACE="$interface"
SERVICE="dhcpcd"
DHCP_START="-b -q"
DHCP_STOP="-k"
EOF
				;;
			*)
				return
				;;
		esac
	fi
}

expand_fs_procedure() # [logfile]
{
	local log_file="${1:-/dev/null}"

	local part_dev disk_dev
	local part_index part_name part_uuid part_type
	local part_last_sector disk_last_usable_sector
	local part_start_sector part_sector_count
	local disk_sector_size part_size

	part_dev=$(findmnt / --raw -o SOURCE --noheadings)
	disk_dev="/dev/$(lsblk "$part_dev" --noheadings --nodeps -o PKNAME)"

	# Move the second partition header to the end of the disk.
	procedure_progress 25% "Moving the second partition header to the end of the disk..."
	>> "$log_file" 2>&1 sgdisk "$disk_dev" --move-second-header

	part_last_sector=$(partx "$part_dev" --raw -o END --noheading)
	disk_last_usable_sector=$(sgdisk "$disk_dev" --print \
		| grep -i 'last usable' \
		| sed 's/.*last usable sector is \([[:digit:]]\+\)/\1/')

	# Check if there is free space left.
	if [ "$part_last_sector" -eq "$disk_last_usable_sector" ]
	then
		procedure_progress 100 "No space left!"
		
		sleep 2

		return
	fi

	part_index=$(partx "$part_dev" --raw -o NR --noheading)
	part_name=$(partx "$part_dev" --raw -o NAME --noheading)
	part_uuid=$(partx "$part_dev" --raw -o UUID --noheading)
	part_type=$(partx "$part_dev" --raw -o TYPE --noheading)

	# Resize partition up to last usable sector.
	procedure_progress 50% "Resizing '$part_dev' to last usable sector..."
	>> "$log_file" 2>&1 sgdisk "$disk_dev" \
		--delete "$part_index" \
		--new "$part_index:$part_start_sector:$disk_last_usable_sector" \
		--typecode "$part_index:$part_type" \
		--partition-guid "$part_index:$part_uuid" \
		--change-name "$part_index:$part_name"

	part_start_sector=$(partx "$part_dev" --raw -o START --noheading)
	part_last_sector="$disk_last_usable_sector"
	part_sector_count=$((part_last_sector - part_start_sector + 1))

	disk_sector_size=$(<"/sys/block/${disk_dev##*/}/queue/hw_sector_size")
	part_size=$((part_sector_count * disk_sector_size))

	# Update kernel partition table.
	>> "$log_file" 2>&1 partx -u "$disk_dev"

	# Resize file-system.
	procedure_progress 75% "Resizing file-system..."
	>> "$log_file" 2>&1 resize2fs "$part_dev" "$((part_size / 512))s"

	procedure_progress 100% "Done!"

	sleep 2
}

expand_fs()
{
	dialog_procedure expand_fs_procedure "Expanding filesystem..."
}

main_dialog()
{
	dialog_menu "Select an option:" \
		net_config	"Network configuration..." \
		expand_fs	"Expand filesystem" \
		exit		"Exit"
}

while true
do
	# Display menu and get user selection
	selection=$(main_dialog)

	# Process user selection
	case "$selection"
	in
		net_config) net_config ;;
		expand_fs)	expand_fs ;;
		*)		 	clear; exit ;;
	esac
done
